Sections:
00: "org0001:0" (0-180)


Source: "test_ram2.asm"
                            	     1:         ORG     $00000000
00:00000000 00100000        	     2:         DC.L    $00100000       ;SP inicial
00:00000004 00000008        	     3:         DC.L    MAIN            ;PC inicial
                            	     4: 
                            	     5: ;# Clock frequency in Hz
                            	     6: F_CPU           equ 12000000
                            	     7: ;# Serial baud rate
                            	     8: BAUD            equ 9600
                            	     9: UART            equ $2000
                            	    10: ; register offsets
                            	    11: RHR             equ 0   ; receive holding register (read)
                            	    12: THR             equ 0   ; transmit holding register (write)
                            	    13: IER             equ 2   ; interrupt enable register
                            	    14: ISR             equ 4   ; interrupt status register (read)
                            	    15: FCR             equ 4   ; FIFO control register (write)
                            	    16: LCR             equ 6   ; line control register
                            	    17: MCR             equ 8   ; modem control register
                            	    18: LSR             equ 10  ; line status register
                            	    19: MSR             equ 12  ; modem status register
                            	    20: SPR             equ 14  ; scratchpad register (reserved for system use)
                            	    21: DLL             equ 0   ; divisor latch LSB
                            	    22: DLM             equ 2   ; divisor latch MSB
                            	    23: ; aliases for register names (used by different manufacturers)
                            	    24: RBR             equ RHR ; receive buffer register
                            	    25: IIR             equ ISR ; interrupt identification register
                            	    26: SCR             equ SPR ; scratch register
                            	    27: 
                            	    28: BAUD_DIV        equ     (((F_CPU*10)/(16*BAUD))+5)/10 ; compute one extra decimal place and round
                            	    29: BAUD_DIV_L      equ     (BAUD_DIV&$FF)
                            	    30: BAUD_DIV_U      equ     ((BAUD_DIV>>8)&$FF)
                            	    31: 
                            	    32: MAIN:
00:00000008 207C00080000    	    33:         MOVE.L  #$80000,A0      ;Início da RAM
00:0000000E 227C000FFFFF    	    34:         MOVE.L  #$FFFFF,A1      ;Fim da RAM
00:00000014 3A3C0000        	    35:         MOVE.W  #$0000,D5       ;D5=0 (sem erro)
00:00000018 203CA5A5A5A5    	    36:         MOVE.L  #$A5A5A5A5,D0
00:0000001E 20790007FFFC    	    37:         MOVE.L  $7FFFC,A0
00:00000024 2080            	    38:         MOVE.L  D0,(A0)
00:00000026 207C00080000    	    39:         MOVE.L  #$80000,A0      ;Início da RAM
                            	    40: 
00:0000002C 263C0007A120    	    41:         move.l  #500000,d3
                            	    42: DELAY_INIT:
00:00000032 5383            	    43:         subq.l  #1,d3
00:00000034 66FC            	    44:         bne     DELAY_INIT
                            	    45: 
                            	    46: 
                            	    47: uartinit:
00:00000036 43F82000        	    48:         lea.l   UART,a1
00:0000003A 137C000D0004    	    49:         move.b  #%00001101,FCR(a1)      ; enable FIFO
00:00000040 137C00830006    	    50:         move.b  #%10000011,LCR(a1)      ; 8 data bits, no parity, 1 stop bit, DLAB=1
00:00000046 12BC004E        	    51:         move.b  #BAUD_DIV_L,DLL(a1)     ; set divisor latch low byte
00:0000004A 137C00000002    	    52:         move.b  #BAUD_DIV_U,DLM(a1)     ; set divisor latch high byte
00:00000050 08A900070006    	    53:         bclr.b  #7,LCR(a1)              ; disable divisor latch
00:00000056 4229000E        	    54:         clr.b   SCR(a1)                 ; clear the scratch register
                            	    55: 
                            	    56: sendchars:
00:0000005A 103C0041        	    57:         move.b  #$41,D0
00:0000005E 08290005000A    	    58: .1:     btst.b  #5,LSR(a1)      ; wait until transmit holding register is empty
00:00000064 67F8            	    59:         beq     .1
00:00000066 1280            	    60:         move.b  d0,THR(a1)      ; transmit byte
                            	    61: 
00:00000068 103C0042        	    62:         move.b  #$42,D0
00:0000006C 08290005000A    	    63: .2:     btst.b  #5,LSR(a1)      ; wait until transmit holding register is empty
00:00000072 67F8            	    64:         beq     .2
00:00000074 1280            	    65:         move.b  d0,THR(a1)      ; transmit byte
                            	    66: 
00:00000076 103C0043        	    67:         move.b  #$43,D0
00:0000007A 08290005000A    	    68: .3:     btst.b  #5,LSR(a1)      ; wait until transmit holding register is empty
00:00000080 67F8            	    69:         beq     .3
00:00000082 1280            	    70:         move.b  d0,THR(a1)      ; transmit byte
                            	    71: 
00:00000084 103C0044        	    72:         move.b  #$44,D0
00:00000088 08290005000A    	    73: .4:     btst.b  #5,LSR(a1)      ; wait until transmit holding register is empty
00:0000008E 67F8            	    74:         beq     .4
00:00000090 1280            	    75:         move.b  d0,THR(a1)      ; transmit byte
                            	    76: 
00:00000092 4EB8015C        	    77:         JSR     COUNTER
                            	    78: mainprogram:
00:00000096 4EB800D2        	    79:         JSR     WARN
00:0000009A 6040            	    80:         BRA     TEST_LED
00:0000009C 6072            	    81:         BRA     pisca
                            	    82: TEST_LOOP:
00:0000009E 203CA5A5A5A5    	    83:         MOVE.L  #$A5A5A5A5,D0   ;Padrão 1
00:000000A4 2080            	    84:         MOVE.L  D0,(A0)         ;Escreve na RAM
00:000000A6 B090            	    85:         CMP.L   (A0),D0         ;Compara
00:000000A8 6614            	    86:         BNE     ERROR           ;Se diferente, erro
00:000000AA 203C5A5A5A5A    	    87:         MOVE.L  #$5A5A5A5A,D0   ;Padrão 2
00:000000B0 2080            	    88:         MOVE.L  D0,(A0)         ;Escreve novamente
00:000000B2 B090            	    89:         CMP.L   (A0),D0         ;Compara
00:000000B4 6608            	    90:         BNE     ERROR           ;Se diferente, erro
00:000000B6 5888            	    91:         ADDQ.L  #4,A0           ;Próximo endereço (4 bytes)
00:000000B8 B1C9            	    92:         CMPA.L  A1,A0           ;Chegou ao fim?
00:000000BA 63E2            	    93:         BLS     TEST_LOOP        ;Se não, continua
00:000000BC 600A            	    94:         BRA     SUCCESS         ;Se passou, fim sem erros
                            	    95: 
                            	    96: ERROR:
00:000000BE 3A3CFF00        	    97:         MOVE.W  #$FF00,D5       ;Sinaliza erro (LEDs acesos)
00:000000C2 31C52400        	    98:         MOVE.W  D5,$2400        ;Ativa LEDs (byte high)
00:000000C6 60FE            	    99:         BRA     *               ;Trava em caso de erro
                            	   100: 
                            	   101: SUCCESS:
00:000000C8 3A3C5500        	   102:         MOVE.W  #$5500,D5       ;Padrão de sucesso (LEDs alternados)
00:000000CC 31C52400        	   103:         MOVE.W  D5,$2400        ;Exibe nos LEDs
00:000000D0 60FE            	   104:         BRA     *               ;Trava após teste completo
                            	   105: 
                            	   106: WARN:
00:000000D2 3A3CFFFF        	   107:         MOVE.W  #$FFFF,D5       ;Sinaliza erro (LEDs acesos)
00:000000D6 31C52400        	   108:         MOVE.W  D5,$2400        ;Ativa LEDs (byte high)
00:000000DA 4E75            	   109:         RTS
                            	   110: 
                            	   111: TEST_LED:
                            	   112:     ; --- Teste do registrador Scratch da UART (0x2007) ---
00:000000DC 43F82000        	   113:         lea.l   UART,A1
                            	   114:         ;move.w  #$00A5,D0
                            	   115: 
00:000000E0 137C00A5000E    	   116:         move.b  #$A5,SCR(A1)
                            	   117: 
                            	   118: ;        move.l  #300000,d3
                            	   119: ;.DELAY1:
                            	   120: ;        subq.l  #1,d3
                            	   121: ;        bne     .DELAY1
                            	   122: 
00:000000E6 43F82000        	   123:         lea.l   UART,A1
00:000000EA 323C0500        	   124:         MOVE.W  #$0500,D1
00:000000EE 1229000E        	   125:         MOVE.b  SCR(A1),D1  ; Lê de volta o registrador Scratch
                            	   126: 
00:000000F2 E159            	   127:         ROL.W #8,D1
00:000000F4 31C12400        	   128:         MOVE.W  D1,$2400
                            	   129: TERMINO:
00:000000F8 60FE            	   130:         BRA TERMINO
                            	   131: 
                            	   132: 
                            	   133:         ;BRA TEST_LED
                            	   134: 
                            	   135:         ; --- Compara escrita vs leitura ---
00:000000FA C27C00FF        	   136:         AND   #$00FF,D1
                            	   137: 
                            	   138: 
00:000000FE B27C00A5        	   139:         CMP   #$A5,D1     ; D1 == D0?
00:00000102 670C            	   140:         BEQ    pisca ; SUCESSO    ; Se igual, vai para SUCESSO
                            	   141: 
                            	   142: 
00:00000104 6030            	   143:         BRA     pisca1 ; ATUALIZA_LEDS
                            	   144: 
                            	   145: SUCESSO:
                            	   146:         ; --- SUCESSO: Padrão 0x47 nos LEDs ---
00:00000106 343C4700        	   147:         MOVE.W  #$4700,D2
                            	   148: 
                            	   149: ATUALIZA_LEDS:
                            	   150:         ; --- Escreve nos LEDs (endereço 0x2400, byte mais significativo) ---
00:0000010A 31C22400        	   151:         MOVE.W  D2,$2400
                            	   152: 
                            	   153: FIM:
00:0000010E 60FE            	   154:         BRA     FIM        ; Loop infinito (ou reinicia se preferir)
                            	   155: 
                            	   156: pisca:
00:00000110 303CFF00        	   157:         MOVE.W  #$FF00,D0       ; Ativa todos os LEDs (D8-D15 = 0xFF)
00:00000114 31C02400        	   158:         MOVE.W  D0,$2400        ; Escreve no barramento (word access)
                            	   159:         ; Delay loop (ajuste conforme clock)
00:00000118 263C0007A120    	   160:         move.l  #500000,d3
                            	   161: DELAY:
00:0000011E 5383            	   162:         subq.l  #1,d3
00:00000120 66FC            	   163:         bne     DELAY
                            	   164: 
00:00000122 303C0000        	   165:         MOVE.W  #$0000,D0       ; desAtiva todos os LEDs (D8-D15 = 0xFF)
00:00000126 31C02400        	   166:         MOVE.W  D0,$2400        ; Escreve no barramento (word access)
                            	   167: 
                            	   168:         ; Delay loop (ajuste conforme clock)
00:0000012A 263C0007A120    	   169:         move.l  #500000,d3
                            	   170: DELAY1:
00:00000130 5383            	   171:         subq.l  #1,d3
00:00000132 66FC            	   172:         bne     DELAY1
00:00000134 60DA            	   173:         BRA     pisca
                            	   174: 
                            	   175: pisca1:
00:00000136 303CAA00        	   176:         MOVE.W  #$AA00,D0       ; Ativa todos os LEDs (D8-D15 = 0xFF)
00:0000013A 31C02400        	   177:         MOVE.W  D0,$2400        ; Escreve no barramento (word access)
                            	   178:         ; Delay loop (ajuste conforme clock)
00:0000013E 263C000186A0    	   179:         move.l  #100000,d3
                            	   180: .DELAY:
00:00000144 5383            	   181:         subq.l  #1,d3
00:00000146 66FC            	   182:         bne     .DELAY
                            	   183: 
00:00000148 303C5500        	   184:         MOVE.W  #$5500,D0       ; desAtiva todos os LEDs (D8-D15 = 0xFF)
00:0000014C 31C02400        	   185:         MOVE.W  D0,$2400        ; Escreve no barramento (word access)
                            	   186: 
                            	   187:         ; Delay loop (ajuste conforme clock)
00:00000150 263C000249F0    	   188:         move.l  #150000,d3
                            	   189: .DELAY1:
00:00000156 5383            	   190:         subq.l  #1,d3
00:00000158 66FC            	   191:         bne     .DELAY1
00:0000015A 60DA            	   192:         BRA     pisca1
                            	   193: 
                            	   194: 
                            	   195: COUNTER:
00:0000015C 103C0000        	   196:         MOVE.B  #$00,D0
                            	   197: 
                            	   198: .LOOP:
00:00000160 43F82000        	   199:         lea.l   UART,A1
00:00000164 1340000E        	   200:         move.b  D0,SCR(A1)
                            	   201: 
00:00000168 263C0007A120    	   202:         move.l  #500000,D3
                            	   203: .DELAY1:
00:0000016E 5383            	   204:         subq.l  #1,D3
00:00000170 66FC            	   205:         bne     .DELAY1
                            	   206: 
00:00000172 1229000E        	   207:         MOVE.b  SCR(A1),D1  ; Lê de volta o registrador Scratch
00:00000176 E159            	   208:         ROL.W   #8,D1
00:00000178 31C12400        	   209:         MOVE.W  D1,$2400
00:0000017C 5240            	   210:         ADD     #1,D0
00:0000017E 60E0            	   211:         BRA     .LOOP
                            	   212: 


Symbols by name:
ATUALIZA_LEDS                    A:0000010A
BAUD                             E:00002580
BAUD_DIV                         E:0000004E
BAUD_DIV_L                       E:0000004E
BAUD_DIV_U                       E:00000000
COUNTER                          A:0000015C
DELAY                            A:0000011E
DELAY1                           A:00000130
DELAY_INIT                       A:00000032
DLL                              E:00000000
DLM                              E:00000002
ERROR                            A:000000BE
FCR                              E:00000004
FIM                              A:0000010E
F_CPU                            E:00B71B00
ISR                              E:00000004
LCR                              E:00000006
LSR                              E:0000000A
MAIN                             A:00000008
RHR                              E:00000000
SCR                              E:0000000E
SPR                              E:0000000E
SUCCESS                          A:000000C8
SUCESSO                          A:00000106
TERMINO                          A:000000F8
TEST_LED                         A:000000DC
TEST_LOOP                        A:0000009E
THR                              E:00000000
UART                             E:00002000
WARN                             A:000000D2
mainprogram                      A:00000096
pisca                            A:00000110
pisca1                           A:00000136
sendchars                        A:0000005A
uartinit                         A:00000036

Symbols by value:
00000000 BAUD_DIV_U
00000000 DLL
00000000 RHR
00000000 THR
00000002 DLM
00000004 FCR
00000004 ISR
00000006 LCR
00000008 MAIN
0000000A LSR
0000000E SCR
0000000E SPR
00000032 DELAY_INIT
00000036 uartinit
0000004E BAUD_DIV
0000004E BAUD_DIV_L
0000005A sendchars
00000096 mainprogram
0000009E TEST_LOOP
000000BE ERROR
000000C8 SUCCESS
000000D2 WARN
000000DC TEST_LED
000000F8 TERMINO
00000106 SUCESSO
0000010A ATUALIZA_LEDS
0000010E FIM
00000110 pisca
0000011E DELAY
00000130 DELAY1
00000136 pisca1
0000015C COUNTER
00002000 UART
00002580 BAUD
00B71B00 F_CPU
