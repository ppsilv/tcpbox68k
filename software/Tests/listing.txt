Sections:
00: "org0001:0" (0-180)


Source: "test_ram2.asm"
                            	     1:         ORG     $00000000
00:00000000 00100000        	     2:         DC.L    $00100000       ;SP inicial
00:00000004 00000008        	     3:         DC.L    MAIN            ;PC inicial
                            	     4: 
                            	     5: ;Term vt-102 cursor positioning \033[0;0H
                            	     6: 
                            	     7: ;# Clock frequency in Hz
                            	     8: F_CPU           equ 16000000
                            	     9: ;# Serial baud rate
                            	    10: BAUD            equ 9600
                            	    11: UART            equ $2300
                            	    12: ; register offsets
                            	    13: RHR             equ 0   ; receive holding register (read)
                            	    14: THR             equ 0   ; transmit holding register (write)
                            	    15: IER             equ 2   ; interrupt enable register
                            	    16: ISR             equ 4   ; interrupt status register (read)
                            	    17: FCR             equ 4   ; FIFO control register (write)
                            	    18: LCR             equ 6   ; line control register
                            	    19: MCR             equ 8   ; modem control register
                            	    20: LSR             equ 10  ; line status register
                            	    21: MSR             equ 12  ; modem status register
                            	    22: SPR             equ 14  ; scratchpad register (reserved for system use)
                            	    23: DLL             equ 0   ; divisor latch LSB
                            	    24: DLM             equ 2   ; divisor latch MSB
                            	    25: ; aliases for register names (used by different manufacturers)cd ..
                            	    26: RBR             equ RHR ; receive buffer register
                            	    27: IIR             equ ISR ; interrupt identification register
                            	    28: SCR             equ SPR ; scratch register
                            	    29: 
                            	    30: BAUD_DIV        equ     (((F_CPU*10)/(16*BAUD))+5)/10 ; compute one extra decimal place and round
                            	    31: BAUD_DIV_L      equ     (BAUD_DIV&$FF)
                            	    32: BAUD_DIV_U      equ     ((BAUD_DIV>>8)&$FF)
                            	    33: 
                            	    34: MAIN:
00:00000008 207C00080000    	    35:         MOVE.L  #$80000,A0      ;Início da RAM
00:0000000E 227C000FFFFF    	    36:         MOVE.L  #$FFFFF,A1      ;Fim da RAM
00:00000014 3A3C0000        	    37:         MOVE.W  #$0000,D5       ;D5=0 (sem erro)
00:00000018 203CA5A5A5A5    	    38:         MOVE.L  #$A5A5A5A5,D0
00:0000001E 20790007FFFC    	    39:         MOVE.L  $7FFFC,A0
00:00000024 2080            	    40:         MOVE.L  D0,(A0)
00:00000026 207C00080000    	    41:         MOVE.L  #$80000,A0      ;Início da RAM
                            	    42: 
00:0000002C 263C0007A120    	    43:         move.l  #500000,d3
                            	    44: DELAY_INIT:
00:00000032 5383            	    45:         subq.l  #1,d3
00:00000034 66FC            	    46:         bne     DELAY_INIT
                            	    47: 
                            	    48: 
                            	    49: uartinit:
00:00000036 43F82300        	    50:         lea.l   UART,a1
00:0000003A 137C000D0004    	    51:         move.b  #%00001101,FCR(a1)      ; enable FIFO
00:00000040 137C00830006    	    52:         move.b  #%10000011,LCR(a1)      ; 8 data bits, no parity, 1 stop bit, DLAB=1
00:00000046 12BC0068        	    53:         move.b  #BAUD_DIV_L,DLL(a1)     ; set divisor latch low byte
00:0000004A 137C00000002    	    54:         move.b  #BAUD_DIV_U,DLM(a1)     ; set divisor latch high byte
00:00000050 08A900070006    	    55:         bclr.b  #7,LCR(a1)              ; disable divisor latch
00:00000056 4229000E        	    56:         clr.b   SCR(a1)                 ; clear the scratch register
                            	    57: 
                            	    58: sendchars:
00:0000005A 103C0041        	    59:         move.b  #$41,D0
00:0000005E 08290005000A    	    60: .1:     btst.b  #5,LSR(a1)      ; wait until transmit holding register is empty
00:00000064 67F8            	    61:         beq     .1
00:00000066 1280            	    62:         move.b  d0,THR(a1)      ; transmit byte
                            	    63: 
00:00000068 103C0042        	    64:         move.b  #$42,D0
00:0000006C 08290005000A    	    65: .2:     btst.b  #5,LSR(a1)      ; wait until transmit holding register is empty
00:00000072 67F8            	    66:         beq     .2
00:00000074 1280            	    67:         move.b  d0,THR(a1)      ; transmit byte
                            	    68: 
00:00000076 103C0043        	    69:         move.b  #$43,D0
00:0000007A 08290005000A    	    70: .3:     btst.b  #5,LSR(a1)      ; wait until transmit holding register is empty
00:00000080 67F8            	    71:         beq     .3
00:00000082 1280            	    72:         move.b  d0,THR(a1)      ; transmit byte
                            	    73: 
00:00000084 103C0044        	    74:         move.b  #$44,D0
00:00000088 08290005000A    	    75: .4:     btst.b  #5,LSR(a1)      ; wait until transmit holding register is empty
00:0000008E 67F8            	    76:         beq     .4
00:00000090 1280            	    77:         move.b  d0,THR(a1)      ; transmit byte
                            	    78: 
00:00000092 4EB8015C        	    79:         JSR     COUNTER
                            	    80: mainprogram:
00:00000096 4EB800D2        	    81:         JSR     WARN
00:0000009A 6040            	    82:         BRA     TEST_LED
00:0000009C 6072            	    83:         BRA     pisca
                            	    84: TEST_LOOP:
00:0000009E 203CA5A5A5A5    	    85:         MOVE.L  #$A5A5A5A5,D0   ;Padrão 1
00:000000A4 2080            	    86:         MOVE.L  D0,(A0)         ;Escreve na RAM
00:000000A6 B090            	    87:         CMP.L   (A0),D0         ;Compara
00:000000A8 6614            	    88:         BNE     ERROR           ;Se diferente, erro
00:000000AA 203C5A5A5A5A    	    89:         MOVE.L  #$5A5A5A5A,D0   ;Padrão 2
00:000000B0 2080            	    90:         MOVE.L  D0,(A0)         ;Escreve novamente
00:000000B2 B090            	    91:         CMP.L   (A0),D0         ;Compara
00:000000B4 6608            	    92:         BNE     ERROR           ;Se diferente, erro
00:000000B6 5888            	    93:         ADDQ.L  #4,A0           ;Próximo endereço (4 bytes)
00:000000B8 B1C9            	    94:         CMPA.L  A1,A0           ;Chegou ao fim?
00:000000BA 63E2            	    95:         BLS     TEST_LOOP        ;Se não, continua
00:000000BC 600A            	    96:         BRA     SUCCESS         ;Se passou, fim sem erros
                            	    97: 
                            	    98: ERROR:
00:000000BE 3A3CFF00        	    99:         MOVE.W  #$FF00,D5       ;Sinaliza erro (LEDs acesos)
00:000000C2 31C52400        	   100:         MOVE.W  D5,$2400        ;Ativa LEDs (byte high)
00:000000C6 60FE            	   101:         BRA     *               ;Trava em caso de erro
                            	   102: 
                            	   103: SUCCESS:
00:000000C8 3A3C5500        	   104:         MOVE.W  #$5500,D5       ;Padrão de sucesso (LEDs alternados)
00:000000CC 31C52400        	   105:         MOVE.W  D5,$2400        ;Exibe nos LEDs
00:000000D0 60FE            	   106:         BRA     *               ;Trava após teste completo
                            	   107: 
                            	   108: WARN:
00:000000D2 3A3CFFFF        	   109:         MOVE.W  #$FFFF,D5       ;Sinaliza erro (LEDs acesos)
00:000000D6 31C52400        	   110:         MOVE.W  D5,$2400        ;Ativa LEDs (byte high)
00:000000DA 4E75            	   111:         RTS
                            	   112: 
                            	   113: TEST_LED:
                            	   114:     ; --- Teste do registrador Scratch da UART (0x2007) ---
00:000000DC 43F82300        	   115:         lea.l   UART,A1
                            	   116:         ;move.w  #$00A5,D0
                            	   117: 
00:000000E0 137C00A5000E    	   118:         move.b  #$A5,SCR(A1)
                            	   119: 
                            	   120: ;        move.l  #300000,d3
                            	   121: ;.DELAY1:
                            	   122: ;        subq.l  #1,d3
                            	   123: ;        bne     .DELAY1
                            	   124: 
00:000000E6 43F82300        	   125:         lea.l   UART,A1
00:000000EA 323C0500        	   126:         MOVE.W  #$0500,D1
00:000000EE 1229000E        	   127:         MOVE.b  SCR(A1),D1  ; Lê de volta o registrador Scratch
                            	   128: 
00:000000F2 E159            	   129:         ROL.W #8,D1
00:000000F4 31C12400        	   130:         MOVE.W  D1,$2400
                            	   131: TERMINO:
00:000000F8 60FE            	   132:         BRA TERMINO
                            	   133: 
                            	   134: 
                            	   135:         ;BRA TEST_LED
                            	   136: 
                            	   137:         ; --- Compara escrita vs leitura ---
00:000000FA C27C00FF        	   138:         AND   #$00FF,D1
                            	   139: 
                            	   140: 
00:000000FE B27C00A5        	   141:         CMP   #$A5,D1     ; D1 == D0?
00:00000102 670C            	   142:         BEQ    pisca ; SUCESSO    ; Se igual, vai para SUCESSO
                            	   143: 
                            	   144: 
00:00000104 6030            	   145:         BRA     pisca1 ; ATUALIZA_LEDS
                            	   146: 
                            	   147: SUCESSO:
                            	   148:         ; --- SUCESSO: Padrão 0x47 nos LEDs ---
00:00000106 343C4700        	   149:         MOVE.W  #$4700,D2
                            	   150: 
                            	   151: ATUALIZA_LEDS:
                            	   152:         ; --- Escreve nos LEDs (endereço 0x2400, byte mais significativo) ---
00:0000010A 31C22400        	   153:         MOVE.W  D2,$2400
                            	   154: 
                            	   155: FIM:
00:0000010E 60FE            	   156:         BRA     FIM        ; Loop infinito (ou reinicia se preferir)
                            	   157: 
                            	   158: pisca:
00:00000110 303CFF00        	   159:         MOVE.W  #$FF00,D0       ; Ativa todos os LEDs (D8-D15 = 0xFF)
00:00000114 31C02400        	   160:         MOVE.W  D0,$2400        ; Escreve no barramento (word access)
                            	   161:         ; Delay loop (ajuste conforme clock)
00:00000118 263C0007A120    	   162:         move.l  #500000,d3
                            	   163: DELAY:
00:0000011E 5383            	   164:         subq.l  #1,d3
00:00000120 66FC            	   165:         bne     DELAY
                            	   166: 
00:00000122 303C0000        	   167:         MOVE.W  #$0000,D0       ; desAtiva todos os LEDs (D8-D15 = 0xFF)
00:00000126 31C02400        	   168:         MOVE.W  D0,$2400        ; Escreve no barramento (word access)
                            	   169: 
                            	   170:         ; Delay loop (ajuste conforme clock)
00:0000012A 263C0007A120    	   171:         move.l  #500000,d3
                            	   172: DELAY1:
00:00000130 5383            	   173:         subq.l  #1,d3
00:00000132 66FC            	   174:         bne     DELAY1
00:00000134 60DA            	   175:         BRA     pisca
                            	   176: 
                            	   177: pisca1:
00:00000136 303CAA00        	   178:         MOVE.W  #$AA00,D0       ; Ativa todos os LEDs (D8-D15 = 0xFF)
00:0000013A 31C02400        	   179:         MOVE.W  D0,$2400        ; Escreve no barramento (word access)
                            	   180:         ; Delay loop (ajuste conforme clock)
00:0000013E 263C000186A0    	   181:         move.l  #100000,d3
                            	   182: .DELAY:
00:00000144 5383            	   183:         subq.l  #1,d3
00:00000146 66FC            	   184:         bne     .DELAY
                            	   185: 
00:00000148 303C5500        	   186:         MOVE.W  #$5500,D0       ; desAtiva todos os LEDs (D8-D15 = 0xFF)
00:0000014C 31C02400        	   187:         MOVE.W  D0,$2400        ; Escreve no barramento (word access)
                            	   188: 
                            	   189:         ; Delay loop (ajuste conforme clock)
00:00000150 263C000249F0    	   190:         move.l  #150000,d3
                            	   191: .DELAY1:
00:00000156 5383            	   192:         subq.l  #1,d3
00:00000158 66FC            	   193:         bne     .DELAY1
00:0000015A 60DA            	   194:         BRA     pisca1
                            	   195: 
                            	   196: 
                            	   197: COUNTER:
00:0000015C 103C0000        	   198:         MOVE.B  #$00,D0
                            	   199: 
                            	   200: .LOOP:
00:00000160 43F82300        	   201:         lea.l   UART,A1
00:00000164 1340000E        	   202:         move.b  D0,SCR(A1)
                            	   203: 
00:00000168 263C0007A120    	   204:         move.l  #500000,D3
                            	   205: .DELAY1:
00:0000016E 5383            	   206:         subq.l  #1,D3
00:00000170 66FC            	   207:         bne     .DELAY1
                            	   208: 
00:00000172 1229000E        	   209:         MOVE.b  SCR(A1),D1  ; Lê de volta o registrador Scratch
00:00000176 E159            	   210:         ROL.W   #8,D1
00:00000178 31C12400        	   211:         MOVE.W  D1,$2400
00:0000017C 5240            	   212:         ADD     #1,D0
00:0000017E 60E0            	   213:         BRA     .LOOP
                            	   214: 


Symbols by name:
ATUALIZA_LEDS                    A:0000010A
BAUD                             E:00002580
BAUD_DIV                         E:00000068
BAUD_DIV_L                       E:00000068
BAUD_DIV_U                       E:00000000
COUNTER                          A:0000015C
DELAY                            A:0000011E
DELAY1                           A:00000130
DELAY_INIT                       A:00000032
DLL                              E:00000000
DLM                              E:00000002
ERROR                            A:000000BE
FCR                              E:00000004
FIM                              A:0000010E
F_CPU                            E:00F42400
ISR                              E:00000004
LCR                              E:00000006
LSR                              E:0000000A
MAIN                             A:00000008
RHR                              E:00000000
SCR                              E:0000000E
SPR                              E:0000000E
SUCCESS                          A:000000C8
SUCESSO                          A:00000106
TERMINO                          A:000000F8
TEST_LED                         A:000000DC
TEST_LOOP                        A:0000009E
THR                              E:00000000
UART                             E:00002300
WARN                             A:000000D2
mainprogram                      A:00000096
pisca                            A:00000110
pisca1                           A:00000136
sendchars                        A:0000005A
uartinit                         A:00000036

Symbols by value:
00000000 BAUD_DIV_U
00000000 DLL
00000000 RHR
00000000 THR
00000002 DLM
00000004 FCR
00000004 ISR
00000006 LCR
00000008 MAIN
0000000A LSR
0000000E SCR
0000000E SPR
00000032 DELAY_INIT
00000036 uartinit
0000005A sendchars
00000068 BAUD_DIV
00000068 BAUD_DIV_L
00000096 mainprogram
0000009E TEST_LOOP
000000BE ERROR
000000C8 SUCCESS
000000D2 WARN
000000DC TEST_LED
000000F8 TERMINO
00000106 SUCESSO
0000010A ATUALIZA_LEDS
0000010E FIM
00000110 pisca
0000011E DELAY
00000130 DELAY1
00000136 pisca1
0000015C COUNTER
00002300 UART
00002580 BAUD
00F42400 F_CPU
