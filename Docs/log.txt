

 * Reset
    . por inversores coletor aberto para halt e reset
    . no reset halt e reset tem que ficar em no minimo 100ms em ZERO
    . na sequência DTACK tem que estar em ZERO ( DTACK = /AS & /ROM_CS )

 * As memorias high e low estavam trocadas porque split.py estava fazendo errado a divisão de arquivos
   tem que ser usado o split68.py

 * A20 não chegava até a memoria por isso não achava a ROM o sistema precisa de A13 até A20 todos em ZERO

 * Memoria HIGH e LOW ou ODD e EVEN
    . LOW = ODD
    . HIGH= EVEN
    Acredito que a explicação seja pelo seguinte, o primeiro byte do arquivo está na posição 1 portanto na
    na posição impar de endereço e e low é porque esse primeiro byte vai na memoria ligada aos dados D0~D7
    dados baixos, menos significativos e par são os bytes da posições pares da memória e estão ligados nos
    byte mais significativo do barramento de dados de D8~D15 por isso high.

 * A4 e A8 estavam em curto por um pedacinho de wire wrap, por isso todo o comportamento anômalo.Depois disso tudo funcionou como
    deveria.

 * erros ao tentar usar o stack pointer, causados por uso de endereço impar no stack pointer causa bus error

 * erros ao tentar gravar na ram no endereço $7FFFF, também causado pelo uso de endereço impar, máquina 16 bits
   big-endiam é isso só endereço par.

 * um curto entre a A14 e um pino onde no final dos testes eu coloquei o RESET da uart estava provocando buss error e com isso
   a cpu fica instável pois o m68k não lida muito bem com buss error.

 * um curto entre os pinos 33a e 33b também provocava buss error esse curto,solda espalhou entre 33a e 33b, foi provocado pela
   colocação um jumper feito no backplane SC112 2249247A_Y204 jumper necessário pois o pino 33b do primeiro conector do barramento não estava ligado ao pino 33b do segundo conector como deveria ser, mas se o cara do canal de youtube Usagi Electric fez isso eu também posso.





